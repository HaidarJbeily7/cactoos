/*
 * SPDX-FileCopyrightText: Copyright (c) 2017-2025 Yegor Bugayenko
 * SPDX-License-Identifier: MIT
 */
package org.cactoos.map;

import org.cactoos.list.ListOf;
import org.hamcrest.MatcherAssert;
import org.hamcrest.core.AllOf;
import org.junit.jupiter.api.Test;
import org.llorllale.cactoos.matchers.HasEntry;
import org.llorllale.cactoos.matchers.RunsInThreads;

/**
 * Test case for {@link Synced}.
 *
 * @since 0.24
 * @checkstyle JavadocMethodCheck (500 lines)
 */
@SuppressWarnings("PMD.JUnitTestsShouldIncludeAssert")
final class SyncedTest {

    @Test
    void behavesAsMap() {
        MatcherAssert.assertThat(
            "Can't behave as a map",
            new Synced<Integer, Integer>(
                new MapEntry<>(0, -1),
                new MapEntry<>(1, 1)
            ),
            new BehavesAsMap<>(1, 1)
        );
    }

    @Test
    void worksInThreads() {
        MatcherAssert.assertThat(
            "Can't behave as a map in multiple threads",
            map -> {
                MatcherAssert.assertThat(
                    "Can't behave as a map in thread",
                    map,
                    new BehavesAsMap<>(1, 1)
                );
                return true;
            },
            new RunsInThreads<>(
                new Synced<Integer, Integer>(
                    new MapEntry<>(0, -1),
                    new MapEntry<>(1, 1)
                )
            )
        );
    }

    @Test
    void mapAndVarargsConstructorTest() {
        MatcherAssert.assertThat(
            "Must behave as a map with entries from both map and varargs",
            new Synced<>(
                new MapOf<Integer, Integer>(
                    new MapEntry<>(0, -4),
                    new MapEntry<>(1, 5)
                ),
                new MapEntry<>(2, 7),
                new MapEntry<>(3, -1)
            ),
            new AllOf<>(
                new HasEntry<>(1, 5),
                new HasEntry<>(2, 7)
            )
        );
    }

    @Test
    void functionsAndMapConstructorTest() {
        MatcherAssert.assertThat(
            "Must behave as a map with entries from map and entries generated by functions",
            new Synced<>(
                key -> key,
                value -> value * value,
                new MapOf<Integer, Integer>(
                    new MapEntry<>(0, -4),
                    new MapEntry<>(1, 5)
                ),
                new ListOf<>(2, 3, 4)
            ),
            new AllOf<>(
                new HasEntry<>(1, 5),
                new HasEntry<>(2, 4),
                new HasEntry<>(3, 9)
            )
        );
    }

    @Test
    void functionsConstructorTest() {
        MatcherAssert.assertThat(
            "Must behave as a map with entries generated by functions",
            new Synced<>(
                new ListOf<>(1, 2, 3, 4),
                key -> key,
                value -> value * 2
            ),
            new AllOf<>(
                new HasEntry<>(1, 2),
                new HasEntry<>(2, 4),
                new HasEntry<>(4, 8)
            )
        );
    }

    @Test
    void mappedListConstructorTest() {
        MatcherAssert.assertThat(
            "Must behave as a map with entries generated by mapping function",
            new Synced<>(
                entry -> new MapEntry<>(entry, entry + 3),
                new ListOf<>(1, 2, 3, 4)
            ),
            new AllOf<>(
                new HasEntry<>(1, 4),
                new HasEntry<>(2, 5),
                new HasEntry<>(3, 6)
            )
        );
    }

    @Test
    void mappedVarargsConstructorTest() {
        MatcherAssert.assertThat(
            "Must behave as a map with entries generated by mapping function",
            new Synced<>(
                entry -> new MapEntry<>(entry, entry % 3),
                1, 2, 3, 4
            ),
            new AllOf<>(
                new HasEntry<>(1, 1),
                new HasEntry<>(2, 2),
                new HasEntry<>(3, 0)
            )
        );
    }

    @Test
    void mappedListWithMapConstructorTest() {
        MatcherAssert.assertThat(
            "Must behave as a map with entries generated by mapping function and entries from map",
            new Synced<>(
                entry -> new MapEntry<>(entry, entry * entry),
                new MapOf<Integer, Integer>(
                    new MapEntry<>(0, -4),
                    new MapEntry<>(1, 5)
                ),
                new ListOf<>(2, 3, 4)
            ),
            new AllOf<>(
                new HasEntry<>(0, -4),
                new HasEntry<>(2, 4),
                new HasEntry<>(3, 9)
            )
        );
    }

    @Test
    void mapAndListConstructorTest() {
        MatcherAssert.assertThat(
            "Must behave as a map with entries from both map and list",
            new Synced<>(
                new MapOf<Integer, Integer>(
                    new MapEntry<>(0, -4),
                    new MapEntry<>(1, 5)
                ),
                new ListOf<>(
                    new MapEntry<>(2, 7),
                    new MapEntry<>(3, -1)
                )
            ),
            new AllOf<>(
                new HasEntry<>(1, 5),
                new HasEntry<>(2, 7)
            )
        );
    }
}
